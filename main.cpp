#include <iostream>
#include <string>

std::string boolToString(bool val)
{
	if(val)
	{
		return "TRUE";
	}
	return "FALSE";
}


bool isPrime(int num)
{
	bool prime = true;

	for(int i = 2; i < num/2; ++i)
	{
		if(num%i == 0)
		{
			prime = false;
		}
	}

	return prime;
}


void run_tests() 
{
	std::cout << "-- isPrime " << 1 << " : " << boolToString(isPrime(1)) << std::endl;
	std::cout << "-- isPrime " << 5 << " : " << boolToString(isPrime(5)) << std::endl;
	std::cout << "-- isPrime " << 8 << " : " << boolToString(isPrime(8)) << std::endl;
}

// if we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

void runProblemOne()
{
	int sum = 0;
	
	for(int i=1; i <1000; ++i)
	{
		if(i%3==0 || i%5==0)
		{
			sum = sum + i;
		}
	}

	std::cout << "-- Problem One  - Answer is: " << sum << std::endl;
}


/*
Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.*/

void runProblemTwo()
{
	long prevFib = 1;
	long currFib = 2;
	long sum = currFib;

	do
	{
		long tmp;

		tmp = currFib;
		currFib = currFib + prevFib;
		prevFib = tmp;

		if(currFib%2==0)
		{
			sum = sum + currFib;
		}

	}while(currFib <= 4000000);


	std::cout << "-- Problem Two  - Answer is: " << sum << std::endl;
}

/*What is the largest prime factor of the number 600851475143 ?*/

void runProblemThree()
{
	long num = 600851475143;
	long largest = 0;


	std::cout << "-- Problem Three - Answer is: " << largest << std::endl;	
}

int main(int argc, char **argv) 
{
	std::cout << std::endl << "--------------------------------------------" << std::endl;
	runProblemOne();
  	runProblemTwo();
  	//runProblemThree();
  	std::cout << std::endl << "--------------------------------------------" << std::endl << std::endl;

  	return 0;
}
















